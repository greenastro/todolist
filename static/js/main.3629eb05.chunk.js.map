{"version":3,"sources":["components/ToDoInsert.js","components/ToDoTemp.js","components/ToDoListItem.js","components/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["ToDoInsert","onInsert","useState","value","setValue","onChange","useCallback","e","target","onClick","preventDefault","className","type","placeholder","ToDoTemp","children","ToDoListItem","todo","onRemove","onToggle","id","text","checked","Class","ToDoList","todos","map","key","App","setToDos","nextID","useRef","next","current","concat","filter","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8SAoCeA,MA/Bf,YACC,IADoBC,EACrB,EADqBA,SACrB,EAC4BC,mBAAS,IADrC,mBACWC,EADX,KACiBC,EADjB,KAMUC,EAAWC,uBAAY,SAAAC,GACzBH,EAASG,EAAEC,OAAOL,SACpB,IAEIM,EAAUH,uBAAY,SAACC,GACzBA,EAAEG,iBAGFT,EAASE,GAEbC,EAAS,MACP,CAACH,EAASE,IAGZ,OACI,0BAAMQ,UAAU,cACZ,2BAAOR,MAAOA,EAAOE,SAAUA,EAAUM,UAAU,WAAWC,KAAK,OAAOC,YAAY,uDACtF,4BAAQF,UAAU,MAAMC,KAAK,SAASH,QAASA,GAC3C,kBAAC,IAAD,S,MClBDK,MATf,YAA8B,IAAXC,EAAU,EAAVA,SACf,OACI,yBAAKJ,UAAU,YACX,yBAAKA,UAAU,aAAf,4BACA,6BAAMI,K,6BCcHC,MAhBf,YAAgD,IAAzBC,EAAwB,EAAxBA,KAAKC,EAAmB,EAAnBA,SAASC,EAAU,EAAVA,SAC1BC,EAAmBH,EAAnBG,GAAGC,EAAgBJ,EAAhBI,KAAKC,EAAWL,EAAXK,QACf,OACI,yBAAKX,UAAU,gBACX,yBAAKA,UAAWY,IAAM,WAAW,CAACD,YAAWb,QAAS,kBAAIU,EAASC,KAC7DE,EAAU,kBAAC,IAAD,MAAgB,kBAAC,IAAD,OAEhC,yBAAKX,UAAWY,IAAM,OAAO,CAACD,aAAYD,GAC1C,yBAAKV,UAAU,SAASF,QAAS,kBAAIS,EAASE,KAC1C,kBAAC,IAAD,SCODI,MAdf,YAA8C,IAA3BC,EAA0B,EAA1BA,MAAMP,EAAoB,EAApBA,SAASC,EAAW,EAAXA,SAC9B,OACA,yBAAKR,UAAU,YAEPc,EAAMC,KAAI,SAAAT,GAAI,OACV,kBAAC,EAAD,CAAcU,IAAKV,EAAKG,GAAKH,KAAMA,EAAMC,SAAUA,EAAUC,SAAUA,SCyCxES,MA9Cf,WAAgB,IAAD,EACW1B,mBAAS,CAC/B,CACAkB,GAAG,EACHC,KAAK,8BACLC,SAAU,GAEZ,CACEF,GAAG,EACHC,KAAK,8BACLC,SAAU,KAVC,mBACNG,EADM,KACAI,EADA,KAgBPC,EAASC,iBAAO,GAChB9B,EAAUK,uBAAY,SAAAe,GAC1B,IAAMW,EAAO,CACXZ,GAAKU,EAAOG,QACZZ,KAAOA,EACPC,SAAU,GAEZO,EAAUJ,EAAOS,OAAOF,IACxBF,EAAOG,SAAW,IAClB,CAACR,IAEGP,EAAWZ,uBAAa,SAAAc,GAC9BS,EAAUJ,EAAMU,QAAQ,SAAAC,GAAI,OAAIA,EAAKhB,KAAOA,QAC1C,CAACK,IAEGN,EAAWb,uBAAa,SAAAc,GAC5BS,EAASJ,EAAMC,KAAK,SAAAU,GAClB,OAAOA,EAAKhB,KAAOA,EAAZ,2BAAqBgB,GAArB,IAA0Bd,SAASc,EAAKd,UAAWc,QAG5D,CAACX,IAEH,OACA,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAYxB,SAAUA,IACtB,kBAAC,EAAD,CAAUwB,MAAOA,EAAOP,SAAUA,EAAUC,SAAUA,MCpCtCkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3629eb05.chunk.js","sourcesContent":["import React, {useCallback,useState} from 'react';\r\nimport './ToDoInsert.css'; \r\nimport {SiAddthis} from \"react-icons/si\";\r\n\r\n\r\nfunction ToDoInsert({onInsert})\r\n{\r\n    const [value,setValue]= useState('');\r\n    // function onChange(e){\r\n    //     setValue(e.target.value);\r\n\r\n    // }\r\n    const onChange = useCallback(e=>{\r\n        setValue(e.target.value);\r\n    },[]);\r\n\r\n    const onClick = useCallback((e)=>{\r\n        e.preventDefault();\r\n        \r\n        // app.js insert 시켜주는 함수\r\n        onInsert(value);\r\n        //value 값을 공백으로 만들어 주는\r\n    setValue('');\r\n    },[onInsert,value]);\r\n\r\n\r\n    return(\r\n        <form className=\"ToDoInsert\">\r\n            <input value={value} onChange={onChange} className=\"InputBox\" type=\"text\" placeholder=\"할 일을 입력하세요\"/>\r\n            <button className=\"Btn\" type=\"submit\" onClick={onClick}>\r\n                <SiAddthis/>\r\n            </button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default ToDoInsert;","import React from 'react';\r\nimport './ToDoTemp.css'; \r\n\r\nfunction ToDoTemp({children}){\r\n    return(\r\n        <div className=\"ToDoTemp\">\r\n            <div className=\"App-Title\">일정관리</div>\r\n            <div>{children}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ToDoTemp;","import React from 'react';\r\nimport Class from 'classnames';\r\nimport {MdCheckBoxOutlineBlank,MdCheckBox,MdClear} from \"react-icons/md\";\r\nimport './ToDoListItem.css';\r\n\r\nfunction ToDoListItem({todo,onRemove,onToggle}){\r\n    const {id,text,checked} = todo;\r\n    return(\r\n        <div className=\"ToDoListItem\">\r\n            <div className={Class('checkbox',{checked})} onClick={()=>onToggle(id)}>\r\n                { checked ? <MdCheckBox/> : <MdCheckBoxOutlineBlank/>}\r\n            </div>\r\n            <div className={Class('text',{checked})}>{text}</div>\r\n            <div className=\"remove\" onClick={()=>onRemove(id)}>\r\n                <MdClear/>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default ToDoListItem;","import React from 'react';\r\nimport ToDoListItem from './ToDoListItem';\r\n\r\n\r\n\r\n\r\n\r\nfunction ToDoList({todos,onRemove,onToggle}) {\r\n    return(\r\n    <div className=\"ToDoList\">\r\n        {\r\n            todos.map(todo=>(\r\n                <ToDoListItem key={todo.id}  todo={todo} onRemove={onRemove} onToggle={onToggle}/>\r\n        \r\n            ))\r\n        }\r\n    </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default ToDoList;","import React,{useState,useRef,useCallback} from 'react';\nimport ToDoInsert from './components/ToDoInsert';\nimport ToDoTemp from './components/ToDoTemp';\nimport ToDoList from './components/ToDoList';\n\n\n\nfunction App() {\n  const [todos,setToDos]= useState([\n    {\n    id:1,\n    text:'할일 목록 1',\n    checked : false\n  },\n  { \n    id:2,\n    text:'할일 목록 2',\n    checked : true\n\n  }\n\n  ]);\n\n  const nextID = useRef(3);\n  const onInsert= useCallback(text=>{\n    const next = {\n      id : nextID.current,\n      text : text,\n      checked : false\n    }\n    setToDos( todos. concat(next) );\n    nextID.current += 1;\n  },[todos]);\n\n  const onRemove = useCallback( id =>{\n  setToDos( todos.filter( data => data.id !== id));\n  },[todos]);\n\n  const onToggle = useCallback( id => {\n    setToDos(todos.map( data => {\n      return data.id === id ? {...data,checked:!data.checked} : data  \n      }));\n\n  },[todos]);\n\n  return (\n  <ToDoTemp>\n    <ToDoInsert onInsert={onInsert}/>\n    <ToDoList todos={todos} onRemove={onRemove} onToggle={onToggle}/>\n  </ToDoTemp>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}